*{box-sizing:border-box}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1;background:#8a2be2}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:none}table{border-collapse:collapse;border-spacing:0}.delete-me-delete-me{padding:0}@media (max-width:1010px){body{border:solid 20px #00f}}@media (max-width:1000px){body{background:red!important}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhc2UvcmVzZXQuc2NzcyIsIm1haW4ubWluLmNzcyIsIm1haW4uY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEMsQ0FDRSxxQixDQ21CRixDLENBQ0EsSSxDQUNBLE8sQ0FDQSxPLENBZkEsTSxDQXlEQSxPLENBQ0EsSyxDQWlCQSxLLENBeENBLEMsQ0FuQkEsRyxDQU5BLFUsQ0FiQSxJLENBOERBLE0sQ0FUQSxPLENBWkEsTSxDQXJCQSxJLENBQ0EsSSxDQXVCQSxFLENBdEJBLEcsQ0F5Q0EsTyxDQXhDQSxHLENBdEJBLEcsQ0F5Q0EsRSxDQUNBLEUsQ0FuQkEsRSxDQXdDQSxLLENBaEJBLFEsQ0FrQkEsVSxDQURBLE0sQ0FFQSxNLENBbEJBLEksQ0EzQ0EsRSxDQUNBLEUsQ0FDQSxFLENBQ0EsRSxDQUNBLEUsQ0FDQSxFLENBeURBLE0sQ0FDQSxNLENEdEVBLEksQ0N5Q0EsQyxDQW5DQSxNLENBb0JBLEcsQ0FDQSxHLENBQ0EsRyxDQXVCQSxLLENBQ0EsTSxDQUpBLEUsQ0E4QkEsSSxDQVBBLEksQ0FDQSxHLENBbkVBLE0sQ0F5Q0EsRSxDQTJCQSxNLENBNURBLEMsQ0FFQSxHLENBY0EsQyxDQTZDQSxJLENBNUNBLEMsQ0FDQSxJLENBNENBLE8sQ0EzQ0EsSyxDQTdCQSxJLENBOEJBLE0sQ0FDQSxNLENBQ0EsRyxDQXlDQSxPLENBeENBLEcsQ0FpQkEsSyxDQUVBLEssQ0FLQSxFLENBSkEsSyxDQUdBLEUsQ0FGQSxLLENBb0JBLEksQ0FuQkEsRSxDQXJCQSxFLENBR0EsQyxDQU9BLEUsQ0FUQSxHLENBMENBLEssQ0NDRSxRLENBQ0EsUyxDQUNBLFEsQ0FFQSxZLENBQ0EsdUIsQ0FLRixPLENEQ0EsSyxDQUNBLE8sQ0FDQSxVLENBQ0EsTSxDQUNBLE0sQ0FDQSxNLENBQ0EsTSxDQUNBLEksQ0FDQSxHLENBQ0EsTyxDQ0NFLGEsQ0FHRixJLENBQ0UsYSxDQTZCQSxrQixDQTFCRixFLENEQ0EsRSxDQ0NFLGUsQ0FHRixVLENEQ0EsQyxDQ0NFLFcsQ0RJRixnQixDQ0RBLGlCLENER0EsTyxDQURBLFEsQ0NHRSxZLENBR0YsSyxDQUNFLHdCLENBQ0EsZ0IsQ0FTRixvQixDQUNFLFMsQ0FHRiwwQkFDRSxJLENBQ0Usd0IsQUFJSiwwQkFDRSxJLENBQ0UsMEIiLCJmaWxlIjoibWFpbi5taW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiKiB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsIFxuZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcblx0bWFyZ2luOiAwO1xuXHRwYWRkaW5nOiAwO1xuXHRib3JkZXI6IDA7XG5cdGZvbnQtc2l6ZTogMTAwJTtcblx0Zm9udDogaW5oZXJpdDtcblx0dmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuLyogSFRNTDUgZGlzcGxheS1yb2xlIHJlc2V0IGZvciBvbGRlciBicm93c2VycyAqL1xuYXJ0aWNsZSwgYXNpZGUsIGRldGFpbHMsIGZpZ2NhcHRpb24sIGZpZ3VyZSwgXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuXHRkaXNwbGF5OiBibG9jaztcbn1cbmJvZHkge1xuXHRsaW5lLWhlaWdodDogMTtcbn1cbm9sLCB1bCB7XG5cdGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5ibG9ja3F1b3RlLCBxIHtcblx0cXVvdGVzOiBub25lO1xufVxuYmxvY2txdW90ZTpiZWZvcmUsIGJsb2NrcXVvdGU6YWZ0ZXIsXG5xOmJlZm9yZSwgcTphZnRlciB7XG5cdGNvbnRlbnQ6ICcnO1xuXHRjb250ZW50OiBub25lO1xufVxudGFibGUge1xuXHRib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuXHRib3JkZXItc3BhY2luZzogMDtcbn0iLCIqIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuaHRtbCxcbmJvZHksXG5kaXYsXG5zcGFuLFxuYXBwbGV0LFxub2JqZWN0LFxuaWZyYW1lLFxuaDEsXG5oMixcbmgzLFxuaDQsXG5oNSxcbmg2LFxucCxcbmJsb2NrcXVvdGUsXG5wcmUsXG5hLFxuYWJicixcbmFjcm9ueW0sXG5hZGRyZXNzLFxuYmlnLFxuY2l0ZSxcbmNvZGUsXG5kZWwsXG5kZm4sXG5lbSxcbmltZyxcbmlucyxcbmtiZCxcbnEsXG5zLFxuc2FtcCxcbnNtYWxsLFxuc3RyaWtlLFxuc3Ryb25nLFxuc3ViLFxuc3VwLFxudHQsXG52YXIsXG5iLFxudSxcbmksXG5jZW50ZXIsXG5kbCxcbmR0LFxuZGQsXG5vbCxcbnVsLFxubGksXG5maWVsZHNldCxcbmZvcm0sXG5sYWJlbCxcbmxlZ2VuZCxcbnRhYmxlLFxuY2FwdGlvbixcbnRib2R5LFxudGZvb3QsXG50aGVhZCxcbnRyLFxudGgsXG50ZCxcbmFydGljbGUsXG5hc2lkZSxcbmNhbnZhcyxcbmRldGFpbHMsXG5lbWJlZCxcbmZpZ3VyZSxcbmZpZ2NhcHRpb24sXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxub3V0cHV0LFxucnVieSxcbnNlY3Rpb24sXG5zdW1tYXJ5LFxudGltZSxcbm1hcmssXG5hdWRpbyxcbnZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxuaGdyb3VwLFxubWVudSxcbm5hdixcbnNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG5vbCxcbnVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYmxvY2txdW90ZSxcbnEge1xuICBxdW90ZXM6IG5vbmU7XG59XG5cbmJsb2NrcXVvdGU6YmVmb3JlLFxuYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLFxucTphZnRlciB7XG4gIGNvbnRlbnQ6ICcnO1xuICBjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4vKiB0ZXN0IGZpbGUgKi9cblxuYm9keSB7XG4gIGJhY2tncm91bmQ6IGJsdWV2aW9sZXQ7XG59XG5cbi5kZWxldGUtbWUtZGVsZXRlLW1lIHtcbiAgcGFkZGluZzogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDEwMTBweCkge1xuICBib2R5IHtcbiAgICBib3JkZXI6IHNvbGlkIDIwcHggYmx1ZTtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gIGJvZHkge1xuICAgIGJhY2tncm91bmQ6IHJlZCAhaW1wb3J0YW50O1xuICB9XG59XG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpoYzJVdmNtVnpaWFF1YzJOemN5SXNJbTFoYVc0dVkzTnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTzBWQlEwVXNjMEpCUVhOQ08wRkJRM2hDT3p0QlFVVkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdSVU5wUmtVc1UwRkJVenRGUVVOVUxGVkJRVlU3UlVGRFZpeFRRVUZUTzBWQlExUXNaVUZCWlR0RlFVTm1MR0ZCUVdFN1JVRkRZaXgzUWtGQmQwSTdRVUZETVVJN08wRkJSVUVzWjBSQlFXZEVPenRCUVVWb1JEczdPenM3T3pzN096czdSVUZYUlN4alFVRmpPMEZCUTJoQ096dEJRVVZCTzBWQlEwVXNZMEZCWXp0QlFVTm9RanM3UVVGRlFUczdSVUZGUlN4blFrRkJaMEk3UVVGRGJFSTdPMEZCUlVFN08wVkJSVVVzV1VGQldUdEJRVU5rT3p0QlFVVkJPenM3TzBWQlNVVXNWMEZCVnp0RlFVTllMR0ZCUVdFN1FVRkRaanM3UVVGRlFUdEZRVU5GTEhsQ1FVRjVRanRGUVVONlFpeHBRa0ZCYVVJN1FVRkRia0k3TzBGQlJVRXNZMEZCWXpzN1FVRkZaRHRGUVVORkxITkNRVUZ6UWp0QlFVTjRRanM3UVVGRlFUdEZRVU5GTEZWQlFWVTdRVUZEV2pzN1FVRkZRVHRGUVVORk8wbEJRMFVzZFVKQlFYVkNPMFZCUTNwQ08wRkJRMFk3TzBGQlJVRTdSVUZEUlR0SlFVTkZMREJDUVVFd1FqdEZRVU0xUWp0QlFVTkdJaXdpWm1sc1pTSTZJbTFoYVc0dVkzTnpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpS2lCN1hHNGdJQ0FnWW05NExYTnBlbWx1WnpvZ1ltOXlaR1Z5TFdKdmVEdGNibjFjYmx4dWFIUnRiQ3dnWW05a2VTd2daR2wyTENCemNHRnVMQ0JoY0hCc1pYUXNJRzlpYW1WamRDd2dhV1p5WVcxbExGeHVhREVzSUdneUxDQm9NeXdnYURRc0lHZzFMQ0JvTml3Z2NDd2dZbXh2WTJ0eGRXOTBaU3dnY0hKbExGeHVZU3dnWVdKaWNpd2dZV055YjI1NWJTd2dZV1JrY21WemN5d2dZbWxuTENCamFYUmxMQ0JqYjJSbExGeHVaR1ZzTENCa1ptNHNJR1Z0TENCcGJXY3NJR2x1Y3l3Z2EySmtMQ0J4TENCekxDQnpZVzF3TEZ4dWMyMWhiR3dzSUhOMGNtbHJaU3dnYzNSeWIyNW5MQ0J6ZFdJc0lITjFjQ3dnZEhRc0lIWmhjaXhjYm1Jc0lIVXNJR2tzSUdObGJuUmxjaXhjYm1Sc0xDQmtkQ3dnWkdRc0lHOXNMQ0IxYkN3Z2JHa3NYRzVtYVdWc1pITmxkQ3dnWm05eWJTd2diR0ZpWld3c0lHeGxaMlZ1WkN4Y2JuUmhZbXhsTENCallYQjBhVzl1TENCMFltOWtlU3dnZEdadmIzUXNJSFJvWldGa0xDQjBjaXdnZEdnc0lIUmtMRnh1WVhKMGFXTnNaU3dnWVhOcFpHVXNJR05oYm5aaGN5d2daR1YwWVdsc2N5d2daVzFpWldRc0lGeHVabWxuZFhKbExDQm1hV2RqWVhCMGFXOXVMQ0JtYjI5MFpYSXNJR2hsWVdSbGNpd2dhR2R5YjNWd0xDQmNibTFsYm5Vc0lHNWhkaXdnYjNWMGNIVjBMQ0J5ZFdKNUxDQnpaV04wYVc5dUxDQnpkVzF0WVhKNUxGeHVkR2x0WlN3Z2JXRnlheXdnWVhWa2FXOHNJSFpwWkdWdklIdGNibHgwYldGeVoybHVPaUF3TzF4dVhIUndZV1JrYVc1bk9pQXdPMXh1WEhSaWIzSmtaWEk2SURBN1hHNWNkR1p2Ym5RdGMybDZaVG9nTVRBd0pUdGNibHgwWm05dWREb2dhVzVvWlhKcGREdGNibHgwZG1WeWRHbGpZV3d0WVd4cFoyNDZJR0poYzJWc2FXNWxPMXh1ZlZ4dUx5b2dTRlJOVERVZ1pHbHpjR3hoZVMxeWIyeGxJSEpsYzJWMElHWnZjaUJ2YkdSbGNpQmljbTkzYzJWeWN5QXFMMXh1WVhKMGFXTnNaU3dnWVhOcFpHVXNJR1JsZEdGcGJITXNJR1pwWjJOaGNIUnBiMjRzSUdacFozVnlaU3dnWEc1bWIyOTBaWElzSUdobFlXUmxjaXdnYUdkeWIzVndMQ0J0Wlc1MUxDQnVZWFlzSUhObFkzUnBiMjRnZTF4dVhIUmthWE53YkdGNU9pQmliRzlqYXp0Y2JuMWNibUp2WkhrZ2UxeHVYSFJzYVc1bExXaGxhV2RvZERvZ01UdGNibjFjYm05c0xDQjFiQ0I3WEc1Y2RHeHBjM1F0YzNSNWJHVTZJRzV2Ym1VN1hHNTlYRzVpYkc5amEzRjFiM1JsTENCeElIdGNibHgwY1hWdmRHVnpPaUJ1YjI1bE8xeHVmVnh1WW14dlkydHhkVzkwWlRwaVpXWnZjbVVzSUdKc2IyTnJjWFZ2ZEdVNllXWjBaWElzWEc1eE9tSmxabTl5WlN3Z2NUcGhablJsY2lCN1hHNWNkR052Ym5SbGJuUTZJQ2NuTzF4dVhIUmpiMjUwWlc1ME9pQnViMjVsTzF4dWZWeHVkR0ZpYkdVZ2UxeHVYSFJpYjNKa1pYSXRZMjlzYkdGd2MyVTZJR052Ykd4aGNITmxPMXh1WEhSaWIzSmtaWEl0YzNCaFkybHVaem9nTUR0Y2JuMGlMQ0lxSUh0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JuMWNibHh1YUhSdGJDeGNibUp2Wkhrc1hHNWthWFlzWEc1emNHRnVMRnh1WVhCd2JHVjBMRnh1YjJKcVpXTjBMRnh1YVdaeVlXMWxMRnh1YURFc1hHNW9NaXhjYm1nekxGeHVhRFFzWEc1b05TeGNibWcyTEZ4dWNDeGNibUpzYjJOcmNYVnZkR1VzWEc1d2NtVXNYRzVoTEZ4dVlXSmljaXhjYm1GamNtOXVlVzBzWEc1aFpHUnlaWE56TEZ4dVltbG5MRnh1WTJsMFpTeGNibU52WkdVc1hHNWtaV3dzWEc1a1ptNHNYRzVsYlN4Y2JtbHRaeXhjYm1sdWN5eGNibXRpWkN4Y2JuRXNYRzV6TEZ4dWMyRnRjQ3hjYm5OdFlXeHNMRnh1YzNSeWFXdGxMRnh1YzNSeWIyNW5MRnh1YzNWaUxGeHVjM1Z3TEZ4dWRIUXNYRzUyWVhJc1hHNWlMRnh1ZFN4Y2Jta3NYRzVqWlc1MFpYSXNYRzVrYkN4Y2JtUjBMRnh1WkdRc1hHNXZiQ3hjYm5Wc0xGeHViR2tzWEc1bWFXVnNaSE5sZEN4Y2JtWnZjbTBzWEc1c1lXSmxiQ3hjYm14bFoyVnVaQ3hjYm5SaFlteGxMRnh1WTJGd2RHbHZiaXhjYm5SaWIyUjVMRnh1ZEdadmIzUXNYRzUwYUdWaFpDeGNiblJ5TEZ4dWRHZ3NYRzUwWkN4Y2JtRnlkR2xqYkdVc1hHNWhjMmxrWlN4Y2JtTmhiblpoY3l4Y2JtUmxkR0ZwYkhNc1hHNWxiV0psWkN4Y2JtWnBaM1Z5WlN4Y2JtWnBaMk5oY0hScGIyNHNYRzVtYjI5MFpYSXNYRzVvWldGa1pYSXNYRzVvWjNKdmRYQXNYRzV0Wlc1MUxGeHVibUYyTEZ4dWIzVjBjSFYwTEZ4dWNuVmllU3hjYm5ObFkzUnBiMjRzWEc1emRXMXRZWEo1TEZ4dWRHbHRaU3hjYm0xaGNtc3NYRzVoZFdScGJ5eGNiblpwWkdWdklIdGNiaUFnYldGeVoybHVPaUF3TzF4dUlDQndZV1JrYVc1bk9pQXdPMXh1SUNCaWIzSmtaWEk2SURBN1hHNGdJR1p2Ym5RdGMybDZaVG9nTVRBd0pUdGNiaUFnWm05dWREb2dhVzVvWlhKcGREdGNiaUFnZG1WeWRHbGpZV3d0WVd4cFoyNDZJR0poYzJWc2FXNWxPMXh1ZlZ4dVhHNHZLaUJJVkUxTU5TQmthWE53YkdGNUxYSnZiR1VnY21WelpYUWdabTl5SUc5c1pHVnlJR0p5YjNkelpYSnpJQ292WEc1Y2JtRnlkR2xqYkdVc1hHNWhjMmxrWlN4Y2JtUmxkR0ZwYkhNc1hHNW1hV2RqWVhCMGFXOXVMRnh1Wm1sbmRYSmxMRnh1Wm05dmRHVnlMRnh1YUdWaFpHVnlMRnh1YUdkeWIzVndMRnh1YldWdWRTeGNibTVoZGl4Y2JuTmxZM1JwYjI0Z2UxeHVJQ0JrYVhOd2JHRjVPaUJpYkc5amF6dGNibjFjYmx4dVltOWtlU0I3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF4TzF4dWZWeHVYRzV2YkN4Y2JuVnNJSHRjYmlBZ2JHbHpkQzF6ZEhsc1pUb2dibTl1WlR0Y2JuMWNibHh1WW14dlkydHhkVzkwWlN4Y2JuRWdlMXh1SUNCeGRXOTBaWE02SUc1dmJtVTdYRzU5WEc1Y2JtSnNiMk5yY1hWdmRHVTZZbVZtYjNKbExGeHVZbXh2WTJ0eGRXOTBaVHBoWm5SbGNpeGNibkU2WW1WbWIzSmxMRnh1Y1RwaFpuUmxjaUI3WEc0Z0lHTnZiblJsYm5RNklDY25PMXh1SUNCamIyNTBaVzUwT2lCdWIyNWxPMXh1ZlZ4dVhHNTBZV0pzWlNCN1hHNGdJR0p2Y21SbGNpMWpiMnhzWVhCelpUb2dZMjlzYkdGd2MyVTdYRzRnSUdKdmNtUmxjaTF6Y0dGamFXNW5PaUF3TzF4dWZWeHVYRzR2S2lCMFpYTjBJR1pwYkdVZ0tpOWNibHh1WW05a2VTQjdYRzRnSUdKaFkydG5jbTkxYm1RNklHSnNkV1YyYVc5c1pYUTdYRzU5WEc1Y2JpNWtaV3hsZEdVdGJXVXRaR1ZzWlhSbExXMWxJSHRjYmlBZ2NHRmtaR2x1WnpvZ01EdGNibjFjYmx4dVFHMWxaR2xoSUNodFlYZ3RkMmxrZEdnNklERXdNVEJ3ZUNrZ2UxeHVJQ0JpYjJSNUlIdGNiaUFnSUNCaWIzSmtaWEk2SUhOdmJHbGtJREl3Y0hnZ1lteDFaVHRjYmlBZ2ZWeHVmVnh1WEc1QWJXVmthV0VnS0cxaGVDMTNhV1IwYURvZ01UQXdNSEI0S1NCN1hHNGdJR0p2WkhrZ2UxeHVJQ0FnSUdKaFkydG5jbTkxYm1RNklISmxaQ0FoYVcxd2IzSjBZVzUwTzF4dUlDQjlYRzU5SWwxOSAqLyIsIioge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5odG1sLFxuYm9keSxcbmRpdixcbnNwYW4sXG5hcHBsZXQsXG5vYmplY3QsXG5pZnJhbWUsXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYsXG5wLFxuYmxvY2txdW90ZSxcbnByZSxcbmEsXG5hYmJyLFxuYWNyb255bSxcbmFkZHJlc3MsXG5iaWcsXG5jaXRlLFxuY29kZSxcbmRlbCxcbmRmbixcbmVtLFxuaW1nLFxuaW5zLFxua2JkLFxucSxcbnMsXG5zYW1wLFxuc21hbGwsXG5zdHJpa2UsXG5zdHJvbmcsXG5zdWIsXG5zdXAsXG50dCxcbnZhcixcbmIsXG51LFxuaSxcbmNlbnRlcixcbmRsLFxuZHQsXG5kZCxcbm9sLFxudWwsXG5saSxcbmZpZWxkc2V0LFxuZm9ybSxcbmxhYmVsLFxubGVnZW5kLFxudGFibGUsXG5jYXB0aW9uLFxudGJvZHksXG50Zm9vdCxcbnRoZWFkLFxudHIsXG50aCxcbnRkLFxuYXJ0aWNsZSxcbmFzaWRlLFxuY2FudmFzLFxuZGV0YWlscyxcbmVtYmVkLFxuZmlndXJlLFxuZmlnY2FwdGlvbixcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1lbnUsXG5uYXYsXG5vdXRwdXQsXG5ydWJ5LFxuc2VjdGlvbixcbnN1bW1hcnksXG50aW1lLFxubWFyayxcbmF1ZGlvLFxudmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgZm9udC1zaXplOiAxMDAlO1xuICBmb250OiBpbmhlcml0O1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tZW51LFxubmF2LFxuc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG5ib2R5IHtcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbm9sLFxudWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG5ibG9ja3F1b3RlLFxucSB7XG4gIHF1b3Rlczogbm9uZTtcbn1cblxuYmxvY2txdW90ZTpiZWZvcmUsXG5ibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsXG5xOmFmdGVyIHtcbiAgY29udGVudDogJyc7XG4gIGNvbnRlbnQ6IG5vbmU7XG59XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7XG59XG5cbi8qIHRlc3QgZmlsZSAqL1xuXG5ib2R5IHtcbiAgYmFja2dyb3VuZDogYmx1ZXZpb2xldDtcbn1cblxuLmRlbGV0ZS1tZS1kZWxldGUtbWUge1xuICBwYWRkaW5nOiAwO1xufVxuXG5AbWVkaWEgKG1heC13aWR0aDogMTAxMHB4KSB7XG4gIGJvZHkge1xuICAgIGJvcmRlcjogc29saWQgMjBweCBibHVlO1xuICB9XG59XG5cbkBtZWRpYSAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgYm9keSB7XG4gICAgYmFja2dyb3VuZDogcmVkICFpbXBvcnRhbnQ7XG4gIH1cbn0iXX0= */